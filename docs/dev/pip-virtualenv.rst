.. _pip-virtualenv:

Дополнительная конфигурация Pip и Virtualenv
===========================================

.. image:: https://farm4.staticflickr.com/3934/34018732105_f0e6758859_k_d.jpg

Требование активной виртуальной среды для ``pip``
---------------------------------------------------

К настоящему времени должно быть ясно, что использование виртуальных сред - отличный способ
поддерживать чистоту своей среды разработки и поддерживать различные проекты "
требования отдельный.

Когда вы начинаете работать над множеством различных проектов, это может быть трудно запомнить
активировать связанную виртуальную среду, когда вы вернетесь к определенной
проект. В результате этого очень легко устанавливать пакеты по всему миру
думая, что вы на самом деле устанавливаете пакет для виртуального
окружающей среды проекта. Со временем это может привести к запутанному глобальному пакету
список.

Чтобы убедиться, что вы устанавливаете пакеты в активный виртуальный
когда вы используете ``pip install``, подумайте над добавлением следующей
строки к вам :file:`~/.bashrc` file:

.. code-block:: console

    export PIP_REQUIRE_VIRTUALENV=true

После сохранения этого изменения и поиска :file:`~/.bashrc` файла с
``source ~/.bashrc``, pip больше не позволит вам устанавливать пакеты, если вы не
в виртуальной среде. Если вы пытаетесь использовать ``pip install`` вне
виртуальная среда будет мягко напоминать вам, что активированный виртуальный
для установки пакетов требуется среда.

.. code-block:: console

    $ pip install requests
    Could not find an activated virtualenv (required).

Вы также можете выполнить эту настройку, отредактировав свой :file:`pip.conf` или
:file:`pip.ini` file. :file:`pip.conf` используется операциями Unix и Mac OS X
систем и его можно найти по адресу:

.. code-block:: console

    $HOME/.pip/pip.conf

Аналогично :file:`pip.ini` используется операционными системами Windows, и он
можно найти по адресу:

.. code-block:: console

    %HOME%\pip\pip.ini

Если в этих местах у вас нет :file:`pip.conf` или :file:`pip.ini` вы можете создать новый файл с правильным именем для вашейвы можете создать новый файл с правильным именем для вашей операционной системы.операционной системы.

Если у вас уже есть файл конфигурации, просто добавьте следующую строку под
``[global]`` для настройки активной виртуальной среды:

.. code-block:: console

    require-virtualenv = true

Если у вас нет файла конфигурации, вам нужно будет создать новый
добавьте следующие строки в этот новый файл:

.. code-block:: console

    [global]
    require-virtualenv = true


Конечно, вам нужно будет установить некоторые пакеты по всему миру (обычно это те, которые
вы последовательно используете разные проекты), и это может быть достигнуто путем
добавив следующее в ваш :file:`~/.bashrc` файл:

.. code-block:: console

    gpip() {
        PIP_REQUIRE_VIRTUALENV="" pip "$@"
    }

После сохранения изменений и поиска вашего файла :file:`~/.bashrc` вы можете теперь
установите пакеты по всему миру, запустив ``gpip install``. Вы можете изменить название
функции на все, что вам нравится, просто имейте в виду, что вам придется
используйте это имя при попытке установить пакеты по всему миру с помощью pip.

Кэширование пакетов для будущего использования
-------------------------------

Каждый разработчик предпочитает библиотеки и когда вы работаете над большим количеством
разные проекты, у вас должно быть некоторое совпадение между библиотеками
что вы используете. Например, вы можете часто использовать библиотеку ``requests`` различных проектов.

Разумеется, нет необходимости повторно загружать одни и те же пакеты / библиотеки каждый раз
вы начинаете работу над новым проектом (и в результате в результате получается новая виртуальная среда).
К счастью, вы можете настроить pip таким образом, чтобы он пытался повторно использовать
установленных пакетов.

В системах UNIX вы можете добавить следующую строку к вашему файлу :file:`.bashrc` или
:file:`.bash_profile` файл.

.. code-block:: console

    export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache

Вы можете установить путь в любом месте (пока вы пишете
доступ). После добавления этой строки, ``source`` ваш файл :file:`.bashrc`
(or :file:`.bash_profile`) все будет установлено.

Другой способ сделать такую ​​же конфигурацию - через файл: :file:`pip.conf` или
:file:`pip.ini`, в зависимости от вашей системы. Если вы находитесь в Windows, вы можете
добавьте следующую строку в файл :file:`pip.ini` под ``[global]`` settings:

.. code-block:: console

    download-cache = %HOME%\pip\cache

Аналогично, в системах UNIX вы должны просто добавить следующую строку в свой файл
:file:`pip.conf` под ``[global]`` settings:

.. code-block:: console

    download-cache = $HOME/.pip/cache

Несмотря на то, что вы можете использовать любой путь, который вам нравится хранить в кеше, рекомендуется
что вы создаете новую папку * в * папке, где находится ваш файл :file:`pip.conf` или
:file:`pip.ini`. Если вы не доверяете всему этому пути
voodoo, просто используйте приведенные здесь значения, и все будет в порядке.
