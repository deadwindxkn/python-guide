.. _pip-virtualenv:

Дополнительная конфигурация Pip и Virtualenv
===========================================

.. image :: https://farm4.staticflickr.com/3934/34018732105_f0e6758859_k_d.jpg

Требование активной виртуальной среды для `` pip``
-------------------------------------------------- -

К настоящему времени должно быть ясно, что использование виртуальных сред - отличный способ
поддерживать чистоту своей среды разработки и поддерживать различные проекты "
требования отдельный.

Когда вы начинаете работать над множеством различных проектов, это может быть трудно запомнить
активировать связанную виртуальную среду, когда вы вернетесь к определенной
проект. В результате этого очень легко устанавливать пакеты по всему миру
думая, что вы на самом деле устанавливаете пакет для виртуального
окружающей среды проекта. Со временем это может привести к запутанному глобальному пакету
список.

Чтобы убедиться, что вы устанавливаете пакеты в активный виртуальный
когда вы используете `` pip install``, подумайте над добавлением следующего
line к вашему файлу: файл `~ / .bashrc`:

.. code-block :: console

экспорт PIP_REQUIRE_VIRTUALENV = true

После сохранения этого изменения и поиска файла: file: `~ / .bashrc` с
`` source ~ / .bashrc``, pip больше не позволит вам устанавливать пакеты, если вы не
в виртуальной среде. Если вы пытаетесь использовать `` pip install`` вне
виртуальная среда будет мягко напоминать вам, что активированный виртуальный
для установки пакетов требуется среда.

.. code-block :: console

Запросы на установку $ pip
Не удалось найти активированный virtualenv (обязательно).

Вы также можете выполнить эту настройку, отредактировав свой файл: `pip.conf` или
: file: файл `pip.ini`. : file: `pip.conf` используется операционной системой Unix и Mac OS X
систем и его можно найти по адресу:

.. code-block :: console

$ HOME / .pip / pip.conf

Аналогично, файл: файл: `pip.ini` используется операционными системами Windows, и он
можно найти по адресу:

.. code-block :: console

% HOME% \ pip \ pip.ini

Если в этих местах у вас нет файла: file: `pip.conf` или: file:` pip.ini`,
вы можете создать новый файл с правильным именем для вашей операционной системы.

Если у вас уже есть файл конфигурации, просто добавьте следующую строку под
`` [global] `` для настройки активной виртуальной среды:

.. code-block :: console

require-virtualenv = true

Если у вас не было файла конфигурации, вам нужно будет создать новый
добавьте следующие строки в этот новый файл:

.. code-block :: console

[Глобальный]
require-virtualenv = true


Конечно, вам нужно будет установить некоторые пакеты по всему миру (обычно это те, которые
вы последовательно используете разные проекты
добавив следующее в ваш файл: файл: `~ / .bashrc`:

.. code-block :: console

gpip () {
PIP_REQUIRE_VIRTUALENV = "" pip "$ @"
}

После сохранения изменений и поиска вашего файла: file: `~ / .bashrc` вы можете теперь
установите пакеты по всему миру, запустив `` gpip install``. Вы можете изменить название
функции на все, что вам нравится, просто имейте в виду, что вам придется
используйте это имя при попытке установить пакеты по всему миру с помощью pip.

Кэширование пакетов для будущего использования
-------------------------------

У каждого есть лучшее из обоих миров
разные проекты, у вас должно быть некоторое совпадение между библиотеками
что вы используете. Например, вы можете часто использовать библиотеку `` запросов``
различных проектов.

Разумеется, нет необходимости повторно загружать одни и те же пакеты / библиотеки каждый раз
вы начинаете работу над новым проектом (и в результате в результате получается новая виртуальная среда).
К счастью, вы можете настроить таким образом, что он пытается повторно использовать
установленных пакетов.

В системах UNIX вы можете добавить следующие строки к вашему файлу: .bashrc или
: file: `.bash_profile`.

.. code-block :: console

экспорт PIP_DOWNLOAD_CACHE = $ HOME / .pip / cache

Вы можете установить путь в любом месте (пока вы пишете
доступ). После добавления этой строки `` source`` ваш: файл: `.bashrc`
(или: файл: `.bash_profile`), и все будет установлено.

Другой способ сделать такую ??же конфигурацию - через файл: `pip.conf` или
: file: `pip.ini`, в зависимости от вашей системы. Если вы находитесь в Windows, вы можете
добавьте следующую строку в свой файл: file: `pip.ini` под` `[global]` `:

.. code-block :: console

download-cache =% HOME% \ pip \ cache

Аналогично, в системах UNIX вы должны просто добавить следующую строку в свою
: file: `pip.conf` файл под` `[global]` `настройки:

.. code-block :: console

download-cache = $ HOME / .pip / cache

Несмотря на то, что вы можете использовать любой путь, который вам нравится хранить в кеше, рекомендуется
что вы создаете новую папку * в * папке, где находится ваш файл: `pip.conf` или
: файл: файл `pip.ini`. Если вы не доверяете всему этому пути
voodoo, просто используйте приведенные здесь значения, и все будет в порядке.
